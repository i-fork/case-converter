{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"Case Converter To use Case Converter you have to instantiate Convert class, to do so you can use the new keyword or the CaseConverter factory class. The string you want to convert should be passed at instantiation. This cannot be changed later since Convert class is immutable. $var = new Convert('string-to-convert'); Typically, you are going to call Convert methods this way: Basic usage Code: use Jawira\\CaseConverter\\Convert; $robot = new Convert('The-Terminator'); echo $robot->toPascal(); // TheTerminator echo $robot->toCobol(); // THE-TERMINATOR echo $robot->toSnake(); // the_terminator Explicit case detection In some edge cases you have to explicitly set the format of input string to have the desired output: use Jawira\\CaseConverter\\Convert; $agency = new Convert('FBI'); $agency->fromAda(); echo $agency->toCobol(); // FBI echo $agency->toSnake(); // fbi $agency->fromCamel(); echo $agency->toCobol(); // F-B-I echo $agency->toSnake(); // f_b_i $agency->fromAuto(); echo $agency->toCobol(); // FBI echo $agency->toSnake(); // fbi Force Simple Case-Mapping You can still use Simple Case-Mapping even if you are using PHP 7.3 or newer: <?php declare ( strict_types = 1 ); require __DIR__ . '/vendor/autoload.php' ; use Jawira\\CaseConverter\\Convert ; $robot = new Convert ( 'Stra\u00dfe' ); $robot -> forceSimpleCaseMapping (); echo $robot -> toMacro (); // output: STRA\u00dfE Learn more about Case-Mapping . Using the factory CaseConverter factory is going to instantiate Convert class for you. In the following code $this->cc is an instance of \\Jawira\\CaseConverter\\CaseConverter and implements \\Jawira\\CaseConverter\\CaseConverterInterface . This is useful because the factory should be instantiated by the Dependency Injection mechanism provided by your favorite framework. // Convert string to Pascal case $this->cc->convert('XML')->toPascal(); // Xml // Convert string to Snake case $this->cc->convert('v3.0.2')->toSnake(); // v3_0_2 // Convert string to Camel case $this->cc->convert('first-name')->toCamel(); // firstName // Convert from Lower case to Dot case $this->cc->convert('non-SI units')->fromLower()->toDot(); // non-si.units // Get detected words $this->cc->convert('Mario Bros')->toArray(); // ['Mario', 'Bros'] // Retrieve original string $this->cc->convert('use_the_force')->getSource(); // use_the_force More about CaseConverter factory .","title":"Home"},{"location":"index.html#case-converter","text":"To use Case Converter you have to instantiate Convert class, to do so you can use the new keyword or the CaseConverter factory class. The string you want to convert should be passed at instantiation. This cannot be changed later since Convert class is immutable. $var = new Convert('string-to-convert'); Typically, you are going to call Convert methods this way:","title":"Case Converter"},{"location":"index.html#basic-usage","text":"Code: use Jawira\\CaseConverter\\Convert; $robot = new Convert('The-Terminator'); echo $robot->toPascal(); // TheTerminator echo $robot->toCobol(); // THE-TERMINATOR echo $robot->toSnake(); // the_terminator","title":"Basic usage"},{"location":"index.html#explicit-case-detection","text":"In some edge cases you have to explicitly set the format of input string to have the desired output: use Jawira\\CaseConverter\\Convert; $agency = new Convert('FBI'); $agency->fromAda(); echo $agency->toCobol(); // FBI echo $agency->toSnake(); // fbi $agency->fromCamel(); echo $agency->toCobol(); // F-B-I echo $agency->toSnake(); // f_b_i $agency->fromAuto(); echo $agency->toCobol(); // FBI echo $agency->toSnake(); // fbi","title":"Explicit case detection"},{"location":"index.html#force-simple-case-mapping","text":"You can still use Simple Case-Mapping even if you are using PHP 7.3 or newer: <?php declare ( strict_types = 1 ); require __DIR__ . '/vendor/autoload.php' ; use Jawira\\CaseConverter\\Convert ; $robot = new Convert ( 'Stra\u00dfe' ); $robot -> forceSimpleCaseMapping (); echo $robot -> toMacro (); // output: STRA\u00dfE Learn more about Case-Mapping .","title":"Force Simple Case-Mapping"},{"location":"index.html#using-the-factory","text":"CaseConverter factory is going to instantiate Convert class for you. In the following code $this->cc is an instance of \\Jawira\\CaseConverter\\CaseConverter and implements \\Jawira\\CaseConverter\\CaseConverterInterface . This is useful because the factory should be instantiated by the Dependency Injection mechanism provided by your favorite framework. // Convert string to Pascal case $this->cc->convert('XML')->toPascal(); // Xml // Convert string to Snake case $this->cc->convert('v3.0.2')->toSnake(); // v3_0_2 // Convert string to Camel case $this->cc->convert('first-name')->toCamel(); // firstName // Convert from Lower case to Dot case $this->cc->convert('non-SI units')->fromLower()->toDot(); // non-si.units // Get detected words $this->cc->convert('Mario Bros')->toArray(); // ['Mario', 'Bros'] // Retrieve original string $this->cc->convert('use_the_force')->getSource(); // use_the_force More about CaseConverter factory .","title":"Using the factory"},{"location":"api.html","text":"API List of public methods. \\Jawira\\CaseConverter\\Convert String conversion Method Description toCamel() Return string in Camel case format toPascal() Return string in Pascal case format toSnake() Return string in Snake case format toAda() Return string in Ada case format toMacro() Return string in Macro case format toKebab() Return string in Kebab case format toTrain() Return string in Train case format toCobol() Return string in Cobol case format toLower() Return string in Lower case format toUpper() Return string in Upper case format toTitle() Return string in Title case format toSentence() Return string in Sentence case format toDot() Return string in Dot notation Explicit case detection Method Description fromAuto() (default) Auto-detect naming convention fromCamel() Split input string using uppercase characters fromPascal() Split input string using uppercase characters fromSnake() Split input string using _ (underscore character) fromAda() Split input string using _ (underscore character) fromMacro() Split input string using _ (underscore character) fromKebab() Split input string using - (dash character) fromTrain() Split input string using - (dash character) fromCobol() Split input string using - (dash character) fromLower() Split input string using \u2423 (space character) fromUpper() Split input string using \u2423 (space character) fromTitle() Split input string using \u2423 (space character) fromSentence() Split input string using \u2423 (space character) fromDot() Split input string using . (dot character) Please note that some methods are equivalent and have the same effect: fromDot() fromCamel() \u2248 fromPascal() fromSnake() \u2248 fromAda() \u2248 fromMacro() fromKebab() \u2248 fromTrain() \u2248 fromCobol() fromLower() \u2248 fromUpper() \u2248 fromTitle() \u2248 fromSentence() All these methods exists only for sake of completeness. Utility methods Method Description getSource() Returns original input string toArray() Returns array with detected words forceSimpleCaseMapping() Output sting uses Simple Case-Mapping even if you are using PHP 7.3 or newer \\Jawira\\CaseConverter\\CaseConverter Factory method Method Description convert() Creates a Convert object","title":"Api"},{"location":"api.html#api","text":"List of public methods.","title":"API"},{"location":"api.html#jawiracaseconverterconvert","text":"","title":"\\Jawira\\CaseConverter\\Convert"},{"location":"api.html#string-conversion","text":"Method Description toCamel() Return string in Camel case format toPascal() Return string in Pascal case format toSnake() Return string in Snake case format toAda() Return string in Ada case format toMacro() Return string in Macro case format toKebab() Return string in Kebab case format toTrain() Return string in Train case format toCobol() Return string in Cobol case format toLower() Return string in Lower case format toUpper() Return string in Upper case format toTitle() Return string in Title case format toSentence() Return string in Sentence case format toDot() Return string in Dot notation","title":"String conversion"},{"location":"api.html#explicit-case-detection","text":"Method Description fromAuto() (default) Auto-detect naming convention fromCamel() Split input string using uppercase characters fromPascal() Split input string using uppercase characters fromSnake() Split input string using _ (underscore character) fromAda() Split input string using _ (underscore character) fromMacro() Split input string using _ (underscore character) fromKebab() Split input string using - (dash character) fromTrain() Split input string using - (dash character) fromCobol() Split input string using - (dash character) fromLower() Split input string using \u2423 (space character) fromUpper() Split input string using \u2423 (space character) fromTitle() Split input string using \u2423 (space character) fromSentence() Split input string using \u2423 (space character) fromDot() Split input string using . (dot character) Please note that some methods are equivalent and have the same effect: fromDot() fromCamel() \u2248 fromPascal() fromSnake() \u2248 fromAda() \u2248 fromMacro() fromKebab() \u2248 fromTrain() \u2248 fromCobol() fromLower() \u2248 fromUpper() \u2248 fromTitle() \u2248 fromSentence() All these methods exists only for sake of completeness.","title":"Explicit case detection"},{"location":"api.html#utility-methods","text":"Method Description getSource() Returns original input string toArray() Returns array with detected words forceSimpleCaseMapping() Output sting uses Simple Case-Mapping even if you are using PHP 7.3 or newer","title":"Utility methods"},{"location":"api.html#jawiracaseconvertercaseconverter","text":"","title":"\\Jawira\\CaseConverter\\CaseConverter"},{"location":"api.html#factory-method","text":"Method Description convert() Creates a Convert object","title":"Factory method"},{"location":"case-mapping.html","text":"Case-Mapping Introduction Case mapping or case conversion is a process whereby strings are converted to a particular form\u2014uppercase, lowercase, or titlecase\u2014possibly for display to the user. PHP always performed Simple Case-Mapping , this is map one-to-one character mapping. For example, one lower case character is converter to one upper case character. PHP 7.3 introduced Full Case-Mapping , you can have one-to-many character mapping. In practice this means than you can have different results depending on your PHP version. $german = new Convert('Stra\u00dfe'); echo $german->toUpper(); // Produces STRA\u00dfE on PHP 7.2 // Produces STRASSE on PHP 7.3 Please note that Full Case-Mapping is locale dependent: // Turkish (requires appropriate locale) $tur = new Convert('istambul'); echo $tur->toTrain(); // output: \u0130stanbul Forcing Simple Case-Mapping As told before, Full Case-Mapping is only available on PHP 7.3 and newer. The following code snippet is executed on PHP 7.3: // German $ger = new Convert('Stra\u00dfe'); echo $ger->toUpper(); // output: STRASSE To force Simple Case-Mapping you have to call ->forceSimpleCaseMapping() : // German $ger = new Convert('Stra\u00dfe'); $ger->forceSimpleCaseMapping(); echo $ger->toUpper(); // output: STRA\u00dfE Please note ->forceSimpleCaseMapping() has no effect on PHP 7.1 and PHP 7.2 as these version can only perform Simple Case-Mapping . Technical details Internally Case-Converter uses mb_convert_case() , this function uses the following constants: MB_CASE_LOWER MB_CASE_TITLE MB_CASE_UPPER The problem is that, Before PHP 7.3 , these constants perform simple case-mapping and after PHP 7.3 perform full case-mapping. If you want to maintain the old functionality after PHP 7.3 you have to call ->forceSimpleCaseMapping() : // German $ger = new Convert('Stra\u00dfe'); $ger->forceSimpleCaseMapping(); echo $ger->toUpper(); // output: STRASSE IMHO this is a breaking change , PHP people should have keep untouched old constants and create new ones for Full Case-Mapping , for example: MB_CASE_LOWER_FULL , MB_CASE_TITLE_FULL , and MB_CASE_UPPER_FULL (please note these constants do not exist).","title":"Case mapping"},{"location":"case-mapping.html#case-mapping","text":"","title":"Case-Mapping"},{"location":"case-mapping.html#introduction","text":"Case mapping or case conversion is a process whereby strings are converted to a particular form\u2014uppercase, lowercase, or titlecase\u2014possibly for display to the user. PHP always performed Simple Case-Mapping , this is map one-to-one character mapping. For example, one lower case character is converter to one upper case character. PHP 7.3 introduced Full Case-Mapping , you can have one-to-many character mapping. In practice this means than you can have different results depending on your PHP version. $german = new Convert('Stra\u00dfe'); echo $german->toUpper(); // Produces STRA\u00dfE on PHP 7.2 // Produces STRASSE on PHP 7.3 Please note that Full Case-Mapping is locale dependent: // Turkish (requires appropriate locale) $tur = new Convert('istambul'); echo $tur->toTrain(); // output: \u0130stanbul","title":"Introduction"},{"location":"case-mapping.html#forcing-simple-case-mapping","text":"As told before, Full Case-Mapping is only available on PHP 7.3 and newer. The following code snippet is executed on PHP 7.3: // German $ger = new Convert('Stra\u00dfe'); echo $ger->toUpper(); // output: STRASSE To force Simple Case-Mapping you have to call ->forceSimpleCaseMapping() : // German $ger = new Convert('Stra\u00dfe'); $ger->forceSimpleCaseMapping(); echo $ger->toUpper(); // output: STRA\u00dfE Please note ->forceSimpleCaseMapping() has no effect on PHP 7.1 and PHP 7.2 as these version can only perform Simple Case-Mapping .","title":"Forcing Simple Case-Mapping"},{"location":"case-mapping.html#technical-details","text":"Internally Case-Converter uses mb_convert_case() , this function uses the following constants: MB_CASE_LOWER MB_CASE_TITLE MB_CASE_UPPER The problem is that, Before PHP 7.3 , these constants perform simple case-mapping and after PHP 7.3 perform full case-mapping. If you want to maintain the old functionality after PHP 7.3 you have to call ->forceSimpleCaseMapping() : // German $ger = new Convert('Stra\u00dfe'); $ger->forceSimpleCaseMapping(); echo $ger->toUpper(); // output: STRASSE IMHO this is a breaking change , PHP people should have keep untouched old constants and create new ones for Full Case-Mapping , for example: MB_CASE_LOWER_FULL , MB_CASE_TITLE_FULL , and MB_CASE_UPPER_FULL (please note these constants do not exist).","title":"Technical details"},{"location":"detection-algorithm.html","text":"Detection algorithm When \\Jawira\\CaseConverter\\Convert class is instantiated, the input string is analysed to detect the words in it. This is also the algorithm used by Convert::fromAuto method. If input string contains _ (underscore character), then _ is used to split string. If input string contains - (dash character), then - is used to split string. If input string contains \u2423 (space character), then \u2423 is used to split string. If input string contains . (space character), then . is used to split string. If input string contains uppercase characters only, then the input string is considered to be a single word. Finally, uppercase characters are used to split string.","title":"Detection algorithm"},{"location":"detection-algorithm.html#detection-algorithm","text":"When \\Jawira\\CaseConverter\\Convert class is instantiated, the input string is analysed to detect the words in it. This is also the algorithm used by Convert::fromAuto method. If input string contains _ (underscore character), then _ is used to split string. If input string contains - (dash character), then - is used to split string. If input string contains \u2423 (space character), then \u2423 is used to split string. If input string contains . (space character), then . is used to split string. If input string contains uppercase characters only, then the input string is considered to be a single word. Finally, uppercase characters are used to split string.","title":"Detection algorithm"},{"location":"dev.html","text":"Development notes Phing targets $ phing setup : Prepare project for development. $ phing qa : Run quality tests, use this before every commit. Documentation Documentation is built when a release is created. To install mkdocs locally type: sudo -H pip install mkdocs Using Phing behind a proxy If you are developing behind a proxy, you have to set the environment variable http_proxy . This variable already is imported in build.xml , so you have nothing to do. Creating new convention Create new Gluer class Create new split car Update \\Jawira\\CaseConverter\\Convert::analyse if needed Register into \\Jawira\\CaseConverter\\Convert::handleSplitterMethod Register into \\Jawira\\CaseConverter\\Convert::handleGluerMethod Update docblock \\Jawira\\CaseConverter\\Convert to register new methods. Update documentation Railroad diagram https://tabatkins.github.io/railroad-diagrams/generator.html Class diagrams","title":"Dev"},{"location":"dev.html#development-notes","text":"","title":"Development notes"},{"location":"dev.html#phing-targets","text":"$ phing setup : Prepare project for development. $ phing qa : Run quality tests, use this before every commit.","title":"Phing targets"},{"location":"dev.html#documentation","text":"Documentation is built when a release is created. To install mkdocs locally type: sudo -H pip install mkdocs","title":"Documentation"},{"location":"dev.html#using-phing-behind-a-proxy","text":"If you are developing behind a proxy, you have to set the environment variable http_proxy . This variable already is imported in build.xml , so you have nothing to do.","title":"Using Phing behind a proxy"},{"location":"dev.html#creating-new-convention","text":"Create new Gluer class Create new split car Update \\Jawira\\CaseConverter\\Convert::analyse if needed Register into \\Jawira\\CaseConverter\\Convert::handleSplitterMethod Register into \\Jawira\\CaseConverter\\Convert::handleGluerMethod Update docblock \\Jawira\\CaseConverter\\Convert to register new methods. Update documentation","title":"Creating new convention"},{"location":"dev.html#railroad-diagram","text":"https://tabatkins.github.io/railroad-diagrams/generator.html","title":"Railroad diagram"},{"location":"dev.html#class-diagrams","text":"","title":"Class diagrams"},{"location":"known-issues.html","text":"Known issues Number is not a word When using case-converter you cannot use a number as separator. In practice this means a number is always identified as a lower case letter. As shown in the previous example, there is no way to go back to the original input string (i.e. hello-8-world ), in _ kebab case_ this sting is written as hello8-world . Other examples (with automatic case detection): (new Convert('REEL2REAL'))->toDot(); // r.e.e.l2.r.e.a.l (new Convert('reel2real'))->toDot(); // reel2real (new Convert('Reel2Real'))->toDot(); // reel2.real I strongly suggest to avoid numbers in strings to be converted. Mixed conventions It might be evident, but Case Converter cannot handle string with mixed naming conventions. For example the string XMLHttpRequest will result in x.m.l.http.request when using dot notation : $xhr = new Convert('XMLHttpRequest'); $xhr->toDot() // x.m.l.http.request The correct way to name this string (for Case Converter) should have been XmlHttpRequest . Another example of mixed conventions: \u274c Wrong \u2705 Good PHP_CodeSniffer php_code_sniffer PHP_CodeSniffer PhpCodeSniffer PHPUnit PhpUnit PHPUnit php-unit","title":"Known issues"},{"location":"known-issues.html#known-issues","text":"","title":"Known issues"},{"location":"known-issues.html#number-is-not-a-word","text":"When using case-converter you cannot use a number as separator. In practice this means a number is always identified as a lower case letter. As shown in the previous example, there is no way to go back to the original input string (i.e. hello-8-world ), in _ kebab case_ this sting is written as hello8-world . Other examples (with automatic case detection): (new Convert('REEL2REAL'))->toDot(); // r.e.e.l2.r.e.a.l (new Convert('reel2real'))->toDot(); // reel2real (new Convert('Reel2Real'))->toDot(); // reel2.real I strongly suggest to avoid numbers in strings to be converted.","title":"Number is not a word"},{"location":"known-issues.html#mixed-conventions","text":"It might be evident, but Case Converter cannot handle string with mixed naming conventions. For example the string XMLHttpRequest will result in x.m.l.http.request when using dot notation : $xhr = new Convert('XMLHttpRequest'); $xhr->toDot() // x.m.l.http.request The correct way to name this string (for Case Converter) should have been XmlHttpRequest . Another example of mixed conventions: \u274c Wrong \u2705 Good PHP_CodeSniffer php_code_sniffer PHP_CodeSniffer PhpCodeSniffer PHPUnit PhpUnit PHPUnit php-unit","title":"Mixed conventions"},{"location":"naming-conventions.html","text":"Naming conventions Naming conventions are also referred as: Naming style Case convention Reference matrix Lower case Title case Upper case Sentence case _ (underscore) Snake case Ada case Macro case - - (dash) Kebab case Train case Cobol case - . (dot) Dot notation - - - \u2423 (space) Lower case Title case Upper case Sentence case (empty string) - Camel case Pascal case - - Description table (wip) Convention name Description Usage AKA Camel case PHP method names Camel caps, Medial capitals, Lower camel case Pascal case PHP class names Upper camel case Snake case All letters in lower-case separated with a _ (underscore) PHP functions Ada case Macro case PHP constants Kebab case Train case Cobol case Dot notation Lower case Title case Upper case Sentence case Resources https://dev.to/prahladyeri/underscores-camelcasing-and-pascalcasing-the-three-naming-conventions-every-programmer-should-be-aware-of-3aed https://en.wikipedia.org/wiki/Letter_case https://en.wikipedia.org/wiki/Naming_convention_(programming)","title":"Naming conventions"},{"location":"naming-conventions.html#naming-conventions","text":"Naming conventions are also referred as: Naming style Case convention","title":"Naming conventions"},{"location":"naming-conventions.html#reference-matrix","text":"Lower case Title case Upper case Sentence case _ (underscore) Snake case Ada case Macro case - - (dash) Kebab case Train case Cobol case - . (dot) Dot notation - - - \u2423 (space) Lower case Title case Upper case Sentence case (empty string) - Camel case Pascal case - -","title":"Reference matrix"},{"location":"naming-conventions.html#description-table-wip","text":"Convention name Description Usage AKA Camel case PHP method names Camel caps, Medial capitals, Lower camel case Pascal case PHP class names Upper camel case Snake case All letters in lower-case separated with a _ (underscore) PHP functions Ada case Macro case PHP constants Kebab case Train case Cobol case Dot notation Lower case Title case Upper case Sentence case","title":"Description table (wip)"},{"location":"naming-conventions.html#resources","text":"https://dev.to/prahladyeri/underscores-camelcasing-and-pascalcasing-the-three-naming-conventions-every-programmer-should-be-aware-of-3aed https://en.wikipedia.org/wiki/Letter_case https://en.wikipedia.org/wiki/Naming_convention_(programming)","title":"Resources"},{"location":"using-the-factory.html","text":"Using the factory Besides \\Jawira\\CaseConverter\\Convert you also have at your disposal: \\Jawira\\CaseConverter\\CaseConverter \\Jawira\\CaseConverter\\CaseConverterInterface Instead of using new Convert(); you can use the convenience method from CaseConverter class. In concrete, you have to call \\Jawira\\CaseConverter\\CaseConverter::convert to create Convert objects. Here an example: <?php namespace App ; use Jawira\\CaseConverter\\CaseConverterInterface ; class MySuperNameCreator { protected $cc ; public function __construct ( CaseConverterInterface $cc ) { $this -> cc = $cc ; } public function variableName ( string $slug ) : string { // `->convert()` returns a `Convert` object. $myConvert = $this -> cc -> convert ( $slug ); return $myConvert -> toCamel (); } public function constantName ( string $slug ) : string { // Of course you can also chain everything. return $this -> cc -> convert ( $slug ) -> fromKebab () -> toMacro (); } } Please note that an interface - CaseConverterInterface - is also provided. If you are using Symfony you can use this interface with Symfony autowiring to automatically instantiate CaseConverter , otherwise if you are working in a standalone project you should try php-di project . Using \\Jawira\\CaseConverter\\CaseConverter::convert is preferred because: Usually the new operator is considered harmful. You can easily mock dependencies when writing tests. It's SOLID","title":"Using the factory"},{"location":"using-the-factory.html#using-the-factory","text":"Besides \\Jawira\\CaseConverter\\Convert you also have at your disposal: \\Jawira\\CaseConverter\\CaseConverter \\Jawira\\CaseConverter\\CaseConverterInterface Instead of using new Convert(); you can use the convenience method from CaseConverter class. In concrete, you have to call \\Jawira\\CaseConverter\\CaseConverter::convert to create Convert objects. Here an example: <?php namespace App ; use Jawira\\CaseConverter\\CaseConverterInterface ; class MySuperNameCreator { protected $cc ; public function __construct ( CaseConverterInterface $cc ) { $this -> cc = $cc ; } public function variableName ( string $slug ) : string { // `->convert()` returns a `Convert` object. $myConvert = $this -> cc -> convert ( $slug ); return $myConvert -> toCamel (); } public function constantName ( string $slug ) : string { // Of course you can also chain everything. return $this -> cc -> convert ( $slug ) -> fromKebab () -> toMacro (); } } Please note that an interface - CaseConverterInterface - is also provided. If you are using Symfony you can use this interface with Symfony autowiring to automatically instantiate CaseConverter , otherwise if you are working in a standalone project you should try php-di project . Using \\Jawira\\CaseConverter\\CaseConverter::convert is preferred because: Usually the new operator is considered harmful. You can easily mock dependencies when writing tests. It's SOLID","title":"Using the factory"}]}